//warshall
#include <stdio.h>

#define V 4  

void warshall(int graph[V][V]) {
    int path[V][V];

    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            path[i][j] = graph[i][j];
        }
    }

    for (int k = 0; k < V; k++) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                path[i][j] = path[i][j] || (path[i][k] && path[k][j]);
            }
        }
    }

    printf("Transitive Closure of the given graph:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            printf("%d ", path[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int graph[V][V] = {
        {1, 1, 0, 1},
        {0, 1, 1, 0},
        {0, 0, 1, 1},
        {0, 0, 0, 1}
    };

    warshall(graph);
    return 0;
}



































//bubble sort
#include <stdio.h>

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++)
        for (int j = 0; j < n-i-1; j++)
            if (arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
}

int main() {
    int n;
    scanf("%d", &n);
    int arr[n];
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);
    bubbleSort(arr, n);
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}




































//dijkstra's
#include <stdio.h>
#define INF 99999
#define MAX 100

void dijkstra(int graph[MAX][MAX], int n, int start) {
    int dist[MAX], visited[MAX] = {0};
    for (int i = 0; i < n; i++)
        dist[i] = INF;
    dist[start] = 0;

    for (int count = 0; count < n - 1; count++) {
        int u = -1;
        for (int i = 0; i < n; i++)
            if (!visited[i] && (u == -1 || dist[i] < dist[u]))
                u = i;
        visited[u] = 1;

        for (int v = 0; v < n; v++)
            if (graph[u][v] && !visited[v] && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }

    for (int i = 0; i < n; i++)
        printf("Distance from %d to %d = %d\n", start, i, dist[i]);
}

int main() {
    int n, graph[MAX][MAX], start;
    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter the cost adjacency matrix (use %d for no edge):\n", INF);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);

    printf("Enter the starting vertex (0 to %d): ", n - 1);
    scanf("%d", &start);

    dijkstra(graph, n, start);
    return 0;
}








































//floyd's
#include <stdio.h>

#define V 4           
#define INF 9999      

void floydWarshall(int graph[V][V]) {
    int dist[V][V];

    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            dist[i][j] = graph[i][j];
        }
    }

    for (int k = 0; k < V; k++) {             
        for (int i = 0; i < V; i++) {          
            for (int j = 0; j < V; j++) {     
                if (dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }

    printf("All Pairs Shortest Distances:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF)
                printf("INF\t");
            else
                printf("%d\t", dist[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int graph[V][V] = {
        {0,   5,  INF, 10},
        {INF, 0,   3,  INF},
        {INF, INF, 0,   1},
        {INF, INF, INF, 0}
    };

    floydWarshall(graph);
    return 0;
}







































//fractional knapsack
#include <stdio.h>

struct Item {
    int weight, value;
};

void fractionalKnapsack(int n, int capacity, struct Item items[]) {
    float ratio[n], totalValue = 0.0;
    for (int i = 0; i < n; i++)
        ratio[i] = (float)items[i].value / items[i].weight;

    for (int i = 0; i < n - 1; i++)
        for (int j = i + 1; j < n; j++)
            if (ratio[i] < ratio[j]) {
                float tempR = ratio[i]; ratio[i] = ratio[j]; ratio[j] = tempR;
                struct Item temp = items[i]; items[i] = items[j]; items[j] = temp;
            }

    for (int i = 0; i < n && capacity > 0; i++) {
        if (items[i].weight <= capacity) {
            capacity -= items[i].weight;
            totalValue += items[i].value;
        } else {
            totalValue += ratio[i] * capacity;
            capacity = 0;
        }
    }

    printf("Maximum value in knapsack = %.2f\n", totalValue);
}

int main() {
    int n, capacity;
    printf("Enter number of items: ");
    scanf("%d", &n);
    struct Item items[n];

    printf("Enter weight and value of each item:\n");
    for (int i = 0; i < n; i++)
        scanf("%d %d", &items[i].weight, &items[i].value);

    printf("Enter knapsack capacity: ");
    scanf("%d", &capacity);

    fractionalKnapsack(n, capacity, items);
    return 0;
}










































//heapsort
#include <stdio.h>

void heapify(int arr[], int n, int i) {
    int largest = i, l = 2*i + 1, r = 2*i + 2;
    if (l < n && arr[l] > arr[largest]) largest = l;
    if (r < n && arr[r] > arr[largest]) largest = r;
    if (largest != i) {
        int temp = arr[i]; arr[i] = arr[largest]; arr[largest] = temp;
        heapify(arr, n, largest);
    }
}

void heapSort(int arr[], int n) {
    for (int i = n/2 - 1; i >= 0; i--)
        heapify(arr, n, i);
    for (int i = n - 1; i > 0; i--) {
        int temp = arr[0]; arr[0] = arr[i]; arr[i] = temp;
        heapify(arr, i, 0);
    }
}

int main() {
    int n;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter elements:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    heapSort(arr, n);

    printf("Sorted array:\n");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}







































//johnson trotter
#include<stdio.h>
#include<stdlib.h>
#define max 100;
void jhonsontrotter(int n){
    int perm[n],dir[n];
    for(int i=0;i<n;i++){
    perm[i]=i+1;
    dir[i]=-1;
    }
}
while(1){
    int mI=getmI(n);
    int sI=mI+dir[sI];
    int temp=perm[mI]
    pem[sI]=temp;
    int temp=dir[mI];
    dir[mI]=perm[sI];
    perm[mI]=temp;
    for(int i=0;i<n;i++){
        if(perm[i]>perm[mI]){
        dir[i]==di[r]
        }

    }
}
int getm2(int n){
    int min=max,int mI;
    int dir[n];
    for(int i=0;i<n;i++){
        if(dir[i]<min){
            min=dir[i];
            mI=i;

        }
    }
    return mI;
}
int main(){
    int n;
    printf("Enter the number of tiles");
    scanf("%d",&n);
    jhonsontrotter(n);


}







































//job assignment
#include <stdio.h>
#include <limits.h>

#define MAX 20

int minCost = INT_MAX;

void assign(int cost[MAX][MAX], int n, int person, int used[MAX], int currCost) {
    if (person == n) {
        if (currCost < minCost)
            minCost = currCost;
        return;
    }
    for (int job = 0; job < n; job++) {
        if (!used[job]) {
            used[job] = 1;
            assign(cost, n, person + 1, used, currCost + cost[person][job]);
            used[job] = 0;
        }
    }
}

int main() {
    int n, cost[MAX][MAX], used[MAX] = {0};
    printf("Enter number of jobs/people: ");
    scanf("%d", &n);

    printf("Enter cost matrix:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &cost[i][j]);

    assign(cost, n, 0, used, 0);
    printf("Minimum assignment cost = %d\n", minCost);
    return 0;
}












































//knapsack.c
#include <stdio.h>

int max(int a, int b) { return (a > b) ? a : b; }

int knapsack(int W, int wt[], int val[], int n) {
    int dp[n + 1][W + 1];

    for (int i = 0; i <= n; i++)
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0)
                dp[i][w] = 0;
            else if (wt[i - 1] <= w)
                dp[i][w] = max(val[i - 1] + dp[i - 1][w - wt[i - 1]], dp[i - 1][w]);
            else
                dp[i][w] = dp[i - 1][w];
        }

    return dp[n][W];
}

int main() {
    int n, W;
    printf("Enter number of items: ");
    scanf("%d", &n);
    int val[n], wt[n];
    printf("Enter values:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &val[i]);
    printf("Enter weights:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &wt[i]);
    printf("Enter knapsack capacity: ");
    scanf("%d", &W);

    printf("Maximum value = %d\n", knapsack(W, wt, val, n));
    return 0;
}











































//mergesort
#include <stdio.h>

void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1, n2 = r - m;
    int L[n1], R[n2];
    for (int i = 0; i < n1; i++) L[i] = arr[l + i];
    for (int j = 0; j < n2; j++) R[j] = arr[m + 1 + j];

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) arr[k++] = L[i++];
        else arr[k++] = R[j++];
    }
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

int main() {
    int n;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter elements:\n");
    for (int i = 0; i < n; i++) scanf("%d", &arr[i]);

    mergeSort(arr, 0, n - 1);

    printf("Sorted array:\n");
    for (int i = 0; i < n; i++) printf("%d ", arr[i]);
    return 0;
}









































//kruskal
#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct {
    int u, v, weight;
} Edge;

int parent[MAX], rank[MAX];

int find(int x) {
    if (parent[x] != x)
        parent[x] = find(parent[x]); 
    return parent[x];
}

void unionSet(int x, int y) {
    int rootX = find(x);
    int rootY = find(y);
    if (rootX != rootY) {
        if (rank[rootX] < rank[rootY])
            parent[rootX] = rootY;
        else if (rank[rootY] < rank[rootX])
            parent[rootY] = rootX;
        else {
            parent[rootY] = rootX;
            rank[rootX]++;
        }
    }
}

int compare(const void *a, const void *b) {
    Edge *e1 = (Edge*)a;
    Edge *e2 = (Edge*)b;
    return e1->weight - e2->weight;
}

void kruskal(Edge edges[], int n, int E) {
    for (int i = 0; i < n; i++) {
        parent[i] = i;
        rank[i] = 0;
    }

    qsort(edges, E, sizeof(Edge), compare);

    int count = 0, cost = 0;
    printf("Edges in MST:\n");
    for (int i = 0; i < E && count < n - 1; i++) {
        int uSet = find(edges[i].u);
        int vSet = find(edges[i].v);
        if (uSet != vSet) {
            printf("%d -- %d == %d\n", edges[i].u, edges[i].v, edges[i].weight);
            cost += edges[i].weight;
            unionSet(uSet, vSet);
            count++;
        }
    }
    printf("Total cost of MST: %d\n", cost);
}

int main() {
    int n, E;
    printf("Enter number of vertices and edges: ");
    scanf("%d %d", &n, &E);
    Edge edges[E];

    printf("Enter edges (u v weight):\n");
    for (int i = 0; i < E; i++)
        scanf("%d %d %d", &edges[i].u, &edges[i].v, &edges[i].weight);

    kruskal(edges, n, E);
    return 0;
}


















































//n_queens
#include <stdio.h>
#include <stdbool.h>

#define MAX 20

int solutionCount = 0;

bool isSafe(int board[MAX][MAX], int row, int col, int n) {
    for (int i = 0; i < col; i++)
        if (board[row][i]) return false;

    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j]) return false;

    for (int i = row, j = col; j >= 0 && i < n; i++, j--)
        if (board[i][j]) return false;

    return true;
}

void printBoard(int board[MAX][MAX], int n) {
    printf("Solution %d:\n", ++solutionCount);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++)
            printf("%c ", board[i][j] ? 'Q' : '.');
        printf("\n");
    }
    printf("\n");
}

void solveNQUtil(int board[MAX][MAX], int col, int n) {
    if (col == n) {
        printBoard(board, n);
        return;
    }

    for (int i = 0; i < n; i++) {
        if (isSafe(board, i, col, n)) {
            board[i][col] = 1;
            solveNQUtil(board, col + 1, n);
            board[i][col] = 0;
        }
    }
}

int main() {
    int n;
    printf("Enter number of queens: ");
    scanf("%d", &n);

    int board[MAX][MAX] = {0};

    solveNQUtil(board, 0, n);
    if (solutionCount == 0)
        printf("No solutions exist\n");

    return 0;
}






































//patter_making
#include <stdio.h>
#include <string.h>

void patternMatch(char text[], char pattern[]) {
    int n = strlen(text);
    int m = strlen(pattern);
    int found = 0;

    for (int i = 0; i <= n - m; i++) {
        int j;
        for (j = 0; j < m; j++)
            if (text[i + j] != pattern[j])
                break;

        if (j == m) {
            printf("Pattern found at index %d\n", i);
            found = 1;
        }
    }

    if (!found)
        printf("Pattern not found\n");
}

int main() {
    char text[1000], pattern[1000];

    printf("Enter text: ");
    fgets(text, sizeof(text), stdin);
    printf("Enter pattern: ");
    fgets(pattern, sizeof(pattern), stdin);

    // Remove newline from fgets input
    text[strcspn(text, "\n")] = 0;
    pattern[strcspn(pattern, "\n")] = 0;

    patternMatch(text, pattern);

    return 0;
}



















































//prims
#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define MAX 100

int minKey(int key[], bool mstSet[], int n) {
    int min = INT_MAX, min_index = -1;

    for (int v = 0; v < n; v++)
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    return min_index;
}

void primMST(int graph[MAX][MAX], int n) {
    int parent[n];
    int key[n];
    bool mstSet[n];

    for (int i = 0; i < n; i++) {
        key[i] = INT_MAX;
        mstSet[i] = false;
    }

    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < n - 1; count++) {
        int u = minKey(key, mstSet, n);
        mstSet[u] = true;

        for (int v = 0; v < n; v++) {
            // Consider only edges with weight > 0 (i.e. edges that exist)
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    printf("Edge \tWeight\n");
    for (int i = 1; i < n; i++)
        printf("%d - %d \t%d\n", parent[i], i, graph[i][parent[i]]);
}

int main() {
    int n;
    printf("Enter number of vertices: ");
    scanf("%d", &n);

    int graph[MAX][MAX];
    printf("Enter cost adjacency matrix (use 0 if no edge):\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);

    primMST(graph, n);

    return 0;
}
















































//toppo_2
#include <stdio.h>
#define MAX 100

int graph[MAX][MAX], in_degree[MAX], n;

void topoSortSourceRemoval() {
    int queue[MAX], front = 0, rear = 0;

    for (int i = 0; i < n; i++) {
        in_degree[i] = 0;
        for (int j = 0; j < n; j++)
            if (graph[j][i])
                in_degree[i]++;
    }

    for (int i = 0; i < n; i++)
        if (in_degree[i] == 0)
            queue[rear++] = i;

    int count = 0;
    printf("Topological Order (Source Removal): ");
    while (front < rear) {
        int u = queue[front++];
        printf("%d ", u);
        count++;

        for (int v = 0; v < n; v++) {
            if (graph[u][v]) {
                in_degree[v]--;
                if (in_degree[v] == 0)
                    queue[rear++] = v;
            }
        }
    }

    if (count != n)
        printf("\nCycle detected. Topological sort not possible.\n");
    else
        printf("\n");
}

int main() {
    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter adjacency matrix:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);

    topoSortSourceRemoval();

    return 0;
}








































//quick sort
#include <stdio.h>

void swap(int *a, int *b) {
    int t = *a; *a = *b; *b = t;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for(int j = low; j < high; j++) {
        if(arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return i + 1;
}

void quickSort(int arr[], int low, int high) {
    if(low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    int n;
    printf("Enter number of elements: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d elements:\n", n);
    for(int i=0; i<n; i++)
        scanf("%d", &arr[i]);

    quickSort(arr, 0, n-1);

    printf("Sorted array:\n");
    for(int i=0; i<n; i++)
        printf("%d ", arr[i]);
    printf("\n");

    return 0;
}






































//toppological sort.c
#include <stdio.h>
#include <stdlib.h>

#define MAX 100

int graph[MAX][MAX], visited[MAX], stack[MAX], top = -1;
int n;

void dfs(int v) {
    visited[v] = 1;
    for (int i = 0; i < n; i++) {
        if (graph[v][i] && !visited[i])
            dfs(i);
    }
    stack[++top] = v;
}

void topoSortDFS() {
    for (int i = 0; i < n; i++)
        visited[i] = 0;

    for (int i = 0; i < n; i++)
        if (!visited[i])
            dfs(i);

    printf("Topological Order (DFS): ");
    for (int i = top; i >= 0; i--)
        printf("%d ", stack[i]);
    printf("\n");
}

int main() {
    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter adjacency matrix:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);

    topoSortDFS();

    return 0;
}























































//travelling sales man
#include <stdio.h>
#include <limits.h>

#define MAX 16
int n;
int dist[MAX][MAX];
int dp[MAX][1 << MAX];

int tsp(int pos, int mask) {
    if (mask == (1 << n) - 1)
        return dist[pos][0];

    if (dp[pos][mask] != -1)
        return dp[pos][mask];

    int ans = INT_MAX;

    for (int city = 0; city < n; city++) {
        if ((mask & (1 << city)) == 0) {
            int newAns = dist[pos][city] + tsp(city, mask | (1 << city));
            if (newAns < ans)
                ans = newAns;
        }
    }

    return dp[pos][mask] = ans;
}

int main() {
    printf("Enter number of cities (<=16): ");
    scanf("%d", &n);

    printf("Enter distance matrix:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &dist[i][j]);

    for (int i = 0; i < n; i++)
        for (int j = 0; j < (1 << n); j++)
            dp[i][j] = -1;

    int ans = tsp(0, 1); // start from city 0, mask with city 0 visited
    printf("Minimum cost of traveling salesman tour: %d\n", ans);

    return 0;
}
